#!/usr/bin/env python
"""
Script to automatically generate __init__.py files for each subpackage under nirs4all
Scans for class definitions and writes import statements in __init__.py
Usage: python generate_init.py
"""
import os
import re

dir_path = os.path.dirname(os.path.abspath(__file__))
globals()['ROOT'] = os.path.join(dir_path, 'nirs4all')
# Directory containing this script
script_dir = os.path.dirname(os.path.abspath(__file__))
# Root package directory under this workspace (nirs4all/nirs4all)
ROOT = os.path.join(script_dir, 'nirs4all')

# Regex to match class definitions
CLASS_REGEX = re.compile(r'^\s*class\s+(\w+)')

for dirpath, dirnames, filenames in os.walk(ROOT):
    # Skip hidden directories and __pycache__
    if any(part.startswith('.') or part == '__pycache__' for part in dirpath.split(os.sep)):
        continue
    # Collect .py files except __init__.py
    py_files = [f for f in filenames if f.endswith('.py') and f != '__init__.py']
    imports = []
    for fname in py_files:
        module = os.path.splitext(fname)[0]
        file_path = os.path.join(dirpath, fname)
        with open(file_path, 'r', encoding='utf-8') as file:
            for line in file:
                match = CLASS_REGEX.match(line)
                if match:
                    class_name = match.group(1)
                    imports.append(f'from .{module} import {class_name}')
    # Write __init__.py
    init_file = os.path.join(dirpath, '__init__.py')
    with open(init_file, 'w', encoding='utf-8') as initf:
        initf.write('# Auto-generated by generate_init.py\n')
        if imports:
            for imp in sorted(imports):
                initf.write(imp + '\n')
        else:
            initf.write('# No classes to import\n')
